https://mp.weixin.qq.com/s/Gks1j9McPUDllmd7R7KoBA

控制器协作流程
图片

以MySQL实例创建流程为例：

1.用户在云平台创建MySQL集群，云平台会在k8s上创建自定义资源mysqlcluster实例。

2.此时crd控制器(mysqlcluster_controller)监听到mysqlcluster的写入并进行调谐：依次创建其下属资源(configmap、secret、service、statefulset、poddisruptionbudget)，搭建云上MySQL集群。

3.同时orchestrator控制器(orchestrator_controller)也监听到了mysqlcluster的写入并进行调谐：维护一个全局map，将该实例存入map，并开启周期为五秒的定时任务，轮询map中的mysqlcluster实例集合，使用orchestrator不断探测MySQL集群信息。


4.当MySQL pod容器已正常运行但还未就绪时，节点控制器(node_controller)监听到此事件并进行调谐：判断该节点是否为从库并配置上主库信息（创建流程中主库默认为statefulset中的pod-0）。

5.当pod节点就绪时，orchestrator控制器(orchestrator_controller)探测到MySQL集群信息并记录，后将各节点状态和集群状态回写到实例的状态中。

6.crd控制器(mysqlcluster_controller)监听到实例状态的改变，MySQL给状态正常的节点添加对应标签打通服务，完成MySQL集群的部署。
crd控制器(mysqlcluster_controller)：


主要作用：MySQL集群搭建。


调谐目标：cluster及子资源(statefulset,service,configmap,secret等)变化事件。


调谐超时时间：无。


调谐功能：
1.查询调谐目标cluster对象。


2.依次创建/修改资源：configmap、secret、service、statefulset、poddisruptionbudget。

3.实例状态改变时判断status.node是否符合条件，给就绪的pod设置label。


图片


4.删除超过pod副本数的MySQL-PVC。


图片


orchestrator控制器(orchestrator_controller)：

主要作用：MySQL集群信息实时同步于orchestrator，MySQL实例状态写入。


调谐目标：

1.cluster的创建和删除事件，创建时在全局map中存储事件对象，删除时在map中去除该对象。


2.创建一个周期为五秒的定时任务，将map中全部事件存入队列进行调谐，即周期为五秒的当前存在的全部cluster事件。


调谐超时时间：5秒。


调谐功能：


1.查询调谐目标cluster对象。

2.记录cluster对象的原始status。

3.通过设置/删除finalizer进行删除cluster实例的逻辑处理：需要通过orchestrator/cluster接口查询cluster判断是否存在，若不存在，删除finalizer，使cluster删除，意在保证orchestrator中已经清除了该cluster的相关信息。


4.创建或更新cluster对象：


1)首先通过orchestrator/cluster和orchestrator/master接口查询cluster内全部节点信息和主节点信息。


2)再通过clster的副本数，以及上面通过接口查询出的全部节点信息过滤出三种节点信息：需要发现的节点；需要删除的节点，已经就绪的节点；如果是删除操作，则  将全部节点都标记为删除。


3)通过orchestrator/discover接口将第二步需要发现的节点发现一遍。


4)将cluster对象的status中node部分，根据第二步中就绪节点过滤，不存在的将状态全部置为unknown，并将超过副本数的node部分删除。


5)通过orchestrator/set-writeable接口将集群内主节点设置为可写状态，通过orchestrator/set-read-only接口将集群内从节点均置为只读状态。


6)通过orchestrator/audit-recovery接口执行数据库实例的拓扑恢复操作，并记录拓扑恢复节点数组。


7)修改节点状态(status.node)：首先判断节点是否为被检查的状态，若不是将各项状态全部置为unknown；判断节点是否存在延迟(Lagged)，若为主节点或不超过设置的延迟最大时间则为false，超时则为true，不存在则为unknown；判断从节点是否正常(Replicating)，若Slave_IO_Running和Slave_SQL_Running均为true，则表示表示从节点的复制进程正常运行，与主节点同步，为true，否则为false;通过节点名和主节点名是否相等判断是否为主节点(Master);通过node.readonly判断是否为只读(ReadOnly)。


8)设置集群故障迁移状态(cluster.condition.FailoverInProgress)，判断主节点自上次观察到数据库实例以来经过的时间小于五秒，则设置为false，否则true。


9)设置集群只读状态(cluster.condition.ReadOnly)，判断集群内有无可写节点，如果有设置为false，否则true。


10)设置集群就绪状态(cluster.condition.Ready)，判断集群内有主节点(status.node.Master)，且从节点均为正常(status.node.Replicating)，设置为true，否则为false。


11)设置集群待处理的故障转移存在状态(cluster.condition.PendingFailoverAck)，判断所有节点Acknowledged(确认状态)是否均为true，如果不是则待处理的故障转移存在状态为true，否则为false。


12)判断第二步需要删除的节点是否是因为实例删除或最后更新时间超过了忽略期限时间(30秒)，通过orchestrator/forget接口从orchestrator的拓扑中移除这些数据库节点。


13)判断第六步中的恢复节点数组是否大于0，且集群是否为ready状态，且集群更新时间已经超过了600秒的恢复期限，若满足以上条件，则将第六步中的恢复实例数组循环遍历，并判断每个节点的开始恢复时间是否已经超过600秒的恢复期限，若超过，则执行orchestrator/ack-recovery接口，确认已处理的恢复事件，更新恢复状态。

5.判断若不是cluster删除事件且执行第四步操作后的cluster对象的status与记录的原始status不同，则更新status。



节点控制器(node_controller)：

主要作用：MySQL集群主从配置。


调谐目标：pod修改事件，每个已经running但是not ready的MySQL-pod。

调谐超时时间：5秒。

调谐功能：


1.查询调谐目标pod对象。


2.查询对应的cluster对象。


3.查询cluster对应的secret对象。


4.通过该secret对象和headless-service创建数据库连接。


5.测试数据库连通性是否正常(使用select 1 判断返回结果时长是否小于一秒)。

6.再次查询对应的cluster对象，使用非缓存client，保证对象是最新的。


7.查询cluster该节点的status中FailoverInProgress字段如果是true，代表该节点正在进行故障迁移，则停止调谐并报错。


8.执行初始化sql：


1)首先查询status表内configured上是否为1，若不为1，则先将root用户只读权限关闭，若为1，则不进行后续操作。


2)判断MySQL版本是否为8.0，若为8.0，则需要进行半同步复制插件注入。


3)判断该pod是否为从库，如果是则需要执行(change matser to )去配置主库信息。



图片


4)将status表内configured上设置为1。

5)最后开启root用户只读权限。


图片